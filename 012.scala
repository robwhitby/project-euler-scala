#!/bin/sh
exec scala "$0" "$@"
!#

/*
The sequence of triangle numbers is generated by adding the natural numbers.
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

1: 1
3: 1,3
6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
*/

def countDivisors(n: Int): Int = {
  val sqrt = math.sqrt(n).toInt
  (1 to sqrt).filter(n % _ == 0).length * 2 + {if (sqrt * sqrt == n) -1 else 0}
}

def triangles(triangle: Int, n: Int, minDivisors: Int): Int = {
  val tNext = triangle + n
  if (countDivisors(tNext) > minDivisors) tNext
  else triangles(tNext, n + 1, minDivisors)
}

println(triangles(1,2,500))
